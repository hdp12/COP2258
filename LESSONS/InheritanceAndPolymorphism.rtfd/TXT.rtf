{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red45\green68\blue134;
\red234\green234\blue234;\red193\green193\blue193;\red1\green32\blue135;\red18\green139\blue2;\red83\green83\blue83;
\red0\green0\blue255;\red43\green139\blue39;\red0\green0\blue83;\red11\green85\blue38;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa300

\f0\b\fs40 \cf2 \cb3 Class Diagrams\
\pard\pardeftab720\sl340

\b0\fs24 \cf2 Up to this point in OOP we have talked about public/private Static/Instance Variables and Methods, Classes/Objects, and Arrays.\
\pard\pardeftab720\sl400\sa300
\cf2 \
Many times, programmers will diagram classes before coding them. This is useful for mocking up how a class could work, before programming it.\
\pard\pardeftab720\sl400\sa300
{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Class_diagram#Overview"}}{\fldrslt \cf4 http://en.wikipedia.org/wiki/Class_diagram#Overview}}\uc0\u8232 {\field{\*\fldinst{HYPERLINK "http://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/"}}{\fldrslt \cf4 http://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/}}\
You can create these diagrams with {\field{\*\fldinst{HYPERLINK "http://gliffy.com/"}}{\fldrslt \cf4 gliffy.com}}, choosing entity-relationship diagrams from the library box. Choose the box with 3 boxes.\
The first box holds the name of the class. The second box holds any variables in this class. The third box holds the methods in this class.\
Public methods and variables are prepended with a +. Private methods and variables are prepended with a -.\
\pard\pardeftab720\sl400\sa300

\f1 \cf0 
\f0 \cf2 \
\pard\pardeftab720\sl340\sa300

\b\fs40 \cf2 The Object Class\
\pard\pardeftab720\sl340

\b0\fs24 \cf2 A huge part of OOP is the ability to extend other classes to make a class with more specified functionality. In fact, all classes you create automatically extend the Object class.\
\pard\pardeftab720\sl400\sa300
\cf2 \
\
\pard\pardeftab720\sl340\qc

\f1 \cf0 \pard\pardeftab720\sl340\qc

\f0 \cf2 \
\pard\pardeftab720\sl400\sa300
\cf2 \
Any subclass (a class which extends another class) inherits all of the methods and variables from the parent class.\
\pard\pardeftab720\sl400\sa300
{\field{\*\fldinst{HYPERLINK "http://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html"}}{\fldrslt \cf4 http://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html}}\
\pard\pardeftab720\sl340\sa300

\b\fs40 \cf2 Creating a subclass with extends\
\pard\pardeftab720\sl340

\b0\fs24 \cf2 By default, all classes extend Object, whether you explicitly say \'93extends Object\'94 or not.\
\pard\pardeftab720\sl400\sa300
\cf2 \
In Animal.java, the toString() method is being overridden from Object\'92s toString method. 
\b Method overriding
\b0 is one way to change the behavior of a subclass from its parent. When you override a method, you redefine a method from a class A in a new class B that extends class A.\
http://docs.oracle.com/javase/tutorial/java/IandI/override.html\
\pard\pardeftab720\sl400\sa300

\b \cf2 Animal.java
\b0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat3 \tamart100 \tamarb200 \trbrdrt\brdrs\brdrw40\brdrcf6 \trbrdrl\brdrs\brdrw40\brdrcf6 \trbrdrb\brdrs\brdrw40\brdrcf6 \trbrdrr\brdrs\brdrw40\brdrcf6 
\clvertalt \clcbpat5 \clwWidth14000\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf6 \clbrdrl\brdrs\brdrw20\brdrcf6 \clbrdrb\brdrs\brdrw20\brdrcf6 \clbrdrr\brdrs\brdrw20\brdrcf6 \clpadt60 \clpadl200 \clpadb60 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320

\f2\b \cf0 \cb1 public
\f3\b0  
\f2\b class
\f3\b0  Animal 
\f2\b extends
\f3\b0  \cf7 Object\cf0  \cf8 \{\cf0 \
\'a0\
	
\f4\i \cf9 // Overrides the class Object's toString method
\f3\i0 \cf0 \
	
\f2\b public
\f3\b0  \cf7 String\cf0  toString\cf8 ()\cf0  \cf8 \{\cf0 \
		
\f2\b return
\f3\b0  \cf10 "This is my overridden special toString method for an Animal object"\cf11 ;\cf0 \
	\cf8 \}\cf0 \
\'a0\
	
\f2\b public
\f3\b0  
\f2\b \cf12 void
\f3\b0 \cf0  method\cf8 ()\cf0  \cf8 \{\cf0 \
\'a0\
	\cf8 \}\cf0 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl320
\cf8 \}\cf0 \cell \lastrow\row
\pard\pardeftab720\sl400\sa300

\f0 \cf2 \cb3 Cat is a subclass of Animal, which is a subclass of Object. This means that Cat is also an Object. Therefore, it has all of the methods that an Animal has AND all of the methods an Object has.\
\pard\pardeftab720\sl400\sa300

\b \cf2 Cat.java
\b0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat3 \tamart100 \tamarb200 \trbrdrt\brdrs\brdrw40\brdrcf6 \trbrdrl\brdrs\brdrw40\brdrcf6 \trbrdrb\brdrs\brdrw40\brdrcf6 \trbrdrr\brdrs\brdrw40\brdrcf6 
\clvertalt \clcbpat5 \clwWidth12460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf6 \clbrdrl\brdrs\brdrw20\brdrcf6 \clbrdrb\brdrs\brdrw20\brdrcf6 \clbrdrr\brdrs\brdrw20\brdrcf6 \clpadt60 \clpadl200 \clpadb60 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320

\f2\b \cf0 \cb1 public
\f3\b0  
\f2\b class
\f3\b0  Cat 
\f2\b extends
\f3\b0  Animal\cf8 \{\cf0 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl320
\cf8 \}\cf0 \cell \lastrow\row
\pard\pardeftab720\sl340\sa300

\f0\b\fs40 \cf2 \cb3 Polymorphism\
\pard\pardeftab720\sl400\sa300

\b0\fs24 \cf2 http://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html\
Polymorphism is taking a class, extending it, and adding new functionality. This new child, or subclass, will take on the characteristics of its parent, but also have its own unique behaviors.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat3 \tamart100 \tamarb200 \trbrdrt\brdrs\brdrw40\brdrcf6 \trbrdrl\brdrs\brdrw40\brdrcf6 \trbrdrb\brdrs\brdrw40\brdrcf6 \trbrdrr\brdrs\brdrw40\brdrcf6 
\clvertalt \clcbpat5 \clwWidth12460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf6 \clbrdrl\brdrs\brdrw20\brdrcf6 \clbrdrb\brdrs\brdrw20\brdrcf6 \clbrdrr\brdrs\brdrw20\brdrcf6 \clpadt60 \clpadl200 \clpadb60 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320

\f2\b \cf0 \cb1 public
\f3\b0  
\f2\b class
\f3\b0  Inherit \cf8 \{\cf0 \
	
\f2\b public
\f3\b0  
\f2\b static
\f3\b0  
\f2\b \cf12 void
\f3\b0 \cf0  main\cf8 (\cf7 String\cf0  args\cf8 [])\cf0  \cf8 \{\cf0 \
\'a0\
		
\f4\i \cf9 // Creating a new animal object called a
\f3\i0 \cf0 \
		Animal a \cf11 =\cf0  
\f2\b new
\f3\b0  Animal\cf8 ()\cf11 ;\cf0 \
		
\f4\i \cf9 // Calling the toString method on Animal a
\f3\i0 \cf0 \
			
\f4\i \cf9 // storing that in a String called aString
\f3\i0 \cf0 \
		\cf7 String\cf0  aString \cf11 =\cf0  a.\cf13 toString\cf8 ()\cf11 ;\cf0 \
		
\f4\i \cf9 // Printing out the String called aString
\f3\i0 \cf0 \
		\cf7 System\cf0 .\cf13 out\cf0 .\cf13 println\cf8 (\cf0 aString\cf8 )\cf11 ;\cf0 \
\'a0\
		
\f4\i \cf9 // This calls the println method that takes an Object
\f3\i0 \cf0 \
		\cf7 System\cf0 .\cf13 out\cf0 .\cf13 println\cf8 (\cf0 a\cf8 )\cf11 ;\cf0 \
\'a0\
		
\f4\i \cf9 // Making a cat object
\f3\i0 \cf0 \
		Cat c \cf11 =\cf0  
\f2\b new
\f3\b0  Cat\cf8 ()\cf11 ;\cf0 \
		
\f4\i \cf9 // Printing out the Cat object.
\f3\i0 \cf0 \
		
\f4\i \cf9 // Will toString from Animal be called or Object?
\f3\i0 \cf0 \
		\cf7 System\cf0 .\cf13 out\cf0 .\cf13 println\cf8 (\cf10 "Cat: "\cf0  \cf11 +\cf0  c\cf8 )\cf11 ;\cf0 \
	\cf8 \}\cf0 \
\pard\intbl\itap1\pardeftab720\sl320
\cf8 \}\cf0 \cell \lastrow\row
\pard\pardeftab720\sl400\sa300

\f0 \cf2 \cb3 Method overloading is another way to change the behavior and functionality of a subclass. Method overloading is taking a method with the same return type and name, but changing the parameter list. For example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat3 \tamart100 \tamarb200 \trbrdrt\brdrs\brdrw40\brdrcf6 \trbrdrl\brdrs\brdrw40\brdrcf6 \trbrdrb\brdrs\brdrw40\brdrcf6 \trbrdrr\brdrs\brdrw40\brdrcf6 
\clvertalt \clcbpat5 \clwWidth12460\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf6 \clbrdrl\brdrs\brdrw20\brdrcf6 \clbrdrb\brdrs\brdrw20\brdrcf6 \clbrdrr\brdrs\brdrw20\brdrcf6 \clpadt60 \clpadl200 \clpadb60 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320

\f2\b \cf0 \cb1 class
\f3\b0  MyFilter \cf8 \{\cf0 \
  \cf7 Color\cf0  filter\cf8 (\cf7 Color\cf0  c\cf8 )\cf0  \cf8 \{\cf0 \
    
\f4\i \cf9 // Code for one parameter list
\f3\i0 \cf0 \
  \cf8 \}\cf0 \
\'a0\
  \cf7 Color\cf0  filter\cf8 (\cf7 Color\cf0  c1, \cf7 Color\cf0  c2\cf8 )\cf0   \cf8 \{\cf0 \
    
\f4\i \cf9 // the filter method has been overloaded with another parameter list
\f3\i0 \cf0 \
  \cf8 \}\cf0 \
\pard\intbl\itap1\pardeftab720\sl320
\cf8 \}\cf0 \cell \lastrow\row
}